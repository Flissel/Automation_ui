version: '3.8'

services:
  # Virtual Desktop Service
  virtual-desktop-service:
    build:
      context: ../
      dockerfile: docker/Dockerfile.virtual-desktop
    container_name: virtual-desktop-service
    ports:
      - "8000:8000"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SERVICE_PORT=8000
    volumes:
      - ../services:/app/services
      - ../config:/app/config
    networks:
      - virtual-desktop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Workflow Orchestrator Service
  workflow-orchestrator:
    build:
      context: ../
      dockerfile: docker/Dockerfile.workflow
    container_name: workflow-orchestrator
    ports:
      - "8001:8001"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SERVICE_PORT=8001
      - VIRTUAL_DESKTOP_SERVICE_URL=http://virtual-desktop-service:8000
    volumes:
      - ../services:/app/services
      - ../config:/app/config
    networks:
      - virtual-desktop-network
    depends_on:
      - virtual-desktop-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Desktop Automation Service
  desktop-automation:
    build:
      context: ../
      dockerfile: docker/Dockerfile.automation
    container_name: desktop-automation
    ports:
      - "8002:8002"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SERVICE_PORT=8002
    volumes:
      - ../services:/app/services
      - ../config:/app/config
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    networks:
      - virtual-desktop-network
    restart: unless-stopped
    privileged: true
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OCR Processing Service
  ocr-processor:
    build:
      context: ../
      dockerfile: docker/Dockerfile.ocr
    container_name: ocr-processor
    ports:
      - "8003:8003"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SERVICE_PORT=8003
    volumes:
      - ../services:/app/services
      - ../config:/app/config
      - ocr-temp:/tmp/ocr
    networks:
      - virtual-desktop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ../
      dockerfile: docker/Dockerfile.gateway
    container_name: api-gateway
    ports:
      - "8090:8080"
    environment:
      - VIRTUAL_DESKTOP_SERVICE_URL=http://virtual-desktop-service:8000
      - WORKFLOW_ORCHESTRATOR_URL=http://workflow-orchestrator:8001
      - DESKTOP_AUTOMATION_URL=http://desktop-automation:8002
      - OCR_PROCESSOR_URL=http://ocr-processor:8003
    volumes:
      - ../api:/app/api
      - ../config:/app/config
    networks:
      - virtual-desktop-network
    depends_on:
      - virtual-desktop-service
      - workflow-orchestrator
      - desktop-automation
      - ocr-processor
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: virtual-desktop-redis
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    networks:
      - virtual-desktop-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for local data storage (optional, if not using Supabase)
  postgres:
    image: postgres:15-alpine
    container_name: virtual-desktop-postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=virtual_desktop
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../config/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - virtual-desktop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (disabled for now to avoid port conflicts)
  # nginx:
  #   image: nginx:alpine
  #   container_name: virtual-desktop-nginx
  #   ports:
  #     - "8081:80"
  #     - "8443:443"
  #   volumes:
  #     - ../config/nginx.conf:/etc/nginx/nginx.conf
  #     - ../config/ssl:/etc/nginx/ssl
  #   networks:
  #     - virtual-desktop-network
  #   depends_on:
  #     - api-gateway
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

networks:
  virtual-desktop-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  ocr-temp:
    driver: local